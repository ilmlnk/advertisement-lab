import React from "react";
import {
  Box,
  Button,
  Menu,
  MenuButton,
  MenuList,
  MenuItem,
  MenuItemOption,
  MenuGroup,
  MenuOptionGroup,
  MenuDivider,
} from "@chakra-ui/react";
import { ChevronDownIcon } from "@chakra-ui/icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { Document, Page, Text as PdfText } from "react-pdf";
import {
  faFilePdf,
  faFileCsv,
  faFileExcel,
} from "@fortawesome/free-solid-svg-icons";
import { saveAs } from "file-saver";
import { type } from "@testing-library/user-event/dist/type";
import xml2js from "xml2js";
import yaml from "js-yaml";

const ExportButtonMenu = ({ chartData }) => {
  {
    /* Convert to csv format */
  }
  const convertToCsv = ({ csvFileData }) => {
    const csvData = "Label,Value\n";

    chartData.labels.forEach((label, index) => {
      const value = csvFileData.datasets[0].data[index];
      csvData += `${label},${value}\n`;
    });

    return csvData;
  };

  {
    /* Generate PDF document 
  const generatePdf = ({ pdfFileData }) => {
    return (
      <Document>
        <Page>
          <PdfText>Chart Data</PdfText>
          <PdfText>{JSON.stringify(pdfFileData)}</PdfText>
        </Page>
      </Document>
    );
  };
*/
}

  {
    /* Convert to xlsx format
  const convertToXlsx = ({ xlsxFileData }) => {
    const formattedDate = handleFormattedDate();
    const worksheet = XLSX.utils.json_to_sheet(xlsxFileData.datasets[0].data);
    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, "Data");
    const excelBuffer = XLSX.write(workbook, {
      bookType: "xlsx",
      type: "array",
    });
    const fileData = new Blob([excelBuffer], {
      type: "application/octet-stream",
    });
    saveAs(fileData, `chart_data_${formattedDate}.xlsx`);
  };
*/
  }
  {
    /* Convert to json format */
  }

  const convertToJson = ({ jsonFileData }) => {
    const formattedDate = handleFormattedDate();
    const jsonContent = JSON.stringify(jsonFileData);
    const blob = new Blob([jsonContent], { type: "application/json" });
    saveAs(blob, `chart_data_${formattedDate}.json`);
  };

  {
    /* Convert to xml format */
  }

  const convertToXml = ({ xmlFileData }) => {
    const formattedDate = handleFormattedDate();
    const builder = new xml2js.Builder();
    const xmlContent = builder.buildObject(xmlFileData);
    const blob = new Blob([xmlContent], { type: "text/xml" });
    saveAs(blob, `chart_data_${formattedDate}.xml`);
  };

  {
    /* Convert to yaml format */
  }

  const convertToYaml = ({ yamlFileData }) => {
    const formattedDate = handleFormattedDate();
    const yamlContent = yaml.dump(yamlFileData);
    const blob = new Blob([yamlContent], { type: "text/yaml" });
    saveAs(blob, `chart_data${formattedDate}.yaml`);
  };

  {
    /* method to fetch current date for file names */
  }
  const handleFormattedDate = () => {
    const currentDate = new Date();
    const formattedDate = `${currentDate.getFullYear()}_${currentDate.getMonth()}_${currentDate.getDay()}_${currentDate.getHours()}_${currentDate.getMinutes()}_${currentDate.getSeconds()}`;
    return formattedDate;
  };

  return (
    <Menu>
      <MenuButton
        colorScheme="blue"
        as={Button}
        rightIcon={<ChevronDownIcon />}
      >
        Export...
      </MenuButton>
      <MenuList>
        <MenuItem>
          <FontAwesomeIcon icon={faFileCsv} />
          CSV
        </MenuItem>
        <MenuItem>
          <FontAwesomeIcon icon={faFilePdf} />
          PDF
        </MenuItem>
        <MenuItem>
          <FontAwesomeIcon icon={faFileExcel} />
          XLSX
        </MenuItem>
        <MenuItem>JSON</MenuItem>
        <MenuItem>XML</MenuItem>
        <MenuItem>YAML</MenuItem>
      </MenuList>
    </Menu>
  );
};

{
  /*
const saveAsCsv = (csvData) => {
  const blob = new Blob([csvData], { type: "text/csv;charset=utf-8" });
  saveAs(blob, "chart_data.csv");
};

const saveAsPdf = (pdfData) => {
  const blob = new Blob([pdfData], { type: "application/pdf" });
  saveAs(blob, "chart_data.pdf");
};


*/
}

export default ExportButtonMenu;
